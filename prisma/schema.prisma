generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String    @id @default(cuid())
  organizationName  String  @unique
  email             String  @unique
  password          String
  
  emailVerified     DateTime?
  image             String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt


  apiKeys   ApiKey[]
  accounts Account[]
  emails Emails[]
  collections Collections[]
  feedBacks FeedBacks[]

}

model Account {
  id                String   @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}

model ApiKey {
  id           String  @id @default(cuid())
  name         String 
  description  String?
  key           String @unique
  userId  String?  
  user    User?   @relation(fields: [userId] , references: [id] ,onDelete: Cascade)

  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
}





model Collections {
  id     String  @id @default(cuid())
  name   String  @unique
  usersApllied Int @default(0)
  status  String @default("In progress")

  userId  String 
  user  User @relation(fields: [userId] , references: [id])
  
  feedbacks FeedBacks[]
  appliedEmails Emails[]

  updates CollectionUpdates[]

  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}





model FeedBacks  {
  id           String  @id @default(cuid())
  userName      String 
  userEmail     String 
  description    String

  collectionId String 
  collection Collections ? @relation(fields: [collectionId] , references: [ id ] )

  userId String 
  user  User ? @relation(fields: [userId] , references: [ id ])
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}


model Emails {
   id     String @id @default(cuid())
   responseText  String 
   collectionName  String 
   userEmail String 
   collectionId String ?
   userId String 

   appliedCollection Collections ? @relation(fields: [collectionId] , references: [id]) 
   user  User @relation(fields: [userId] , references: [id])

   
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}



model CollectionUpdates {
   id   String @id @default(cuid())
   collectionId  String
   
   collection Collections @relation(fields: [collectionId] , references: [ id ])
   createdAt  DateTime @default(now())
}