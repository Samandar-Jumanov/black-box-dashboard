generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String    @id @default(cuid())
  organizationName  String?   @unique
  email             String?   @unique
  emailVerified     DateTime?
  image             String?
  password          String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt


  apiKeys   ApiKey[]
  accounts Account[]
  progress Progress[]
}

model Account {
  id                String   @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model ApiKey {
  id           String  @id @default(cuid())
  name         String 
  description  String?
  key           String
  userId  String?  
  user    User?   @relation(fields: [userId] , references: [id] ,onDelete: Cascade)

  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
}



model Progress {
  id   String @id @default(cuid())
  label String?
  userId String
  collectionId String 

  user User @relation(fields: [userId] , references: [ id ])
  collections Collections[] 

}


model Collections {
  id     String  @id @default(cuid())
  name   String 
  progressId String?
  usersApllied Int[] @default([0])

  progress Progress ?  @relation(fields: [ progressId] , references: [ id ])
  feedbacks FeedBacks[]
  updates CollectionUpdates[]
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}




model FeedBacks  {
  id           String  @id @default(cuid())
  userName      String 
  bugName       String?
  description    String?

  collectionId String 
  collection Collections @relation(fields: [collectionId ] , references: [ id ] , onDelete: Cascade)

  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

model CollectionUpdates {
   id   String @id @default(cuid())
   collectionId  String
   
   collection Collections @relation(fields: [collectionId] , references: [ id ])
   createdAt  DateTime @default(now())
}